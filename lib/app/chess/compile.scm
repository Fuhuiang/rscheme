
(define-macro (blambda args expr)
  (define (compile e envt)
    (cond
     ((symbol? e)
      (if (eq? e 'nil)
          "!"
          (let ((l (assq e envt)))
            (if l
                (case (cadr l)
                  ((reg) (list "<" (number->string (caddr l))))
                  ((arg) (number->string (caddr l))))
                (error "undefined variable ~s" e)))))
     ((pair? e)
      (case (car e)
        ((begin)
         (map (lambda (s)
                (compile s envt))
              (cdr e)))
        ((let)
         (let ((var (car (car (cadr e))))
               (init (cadr (car (cadr e))))
               (body (cddr e))
               (r (length envt)))
           (list (compile init envt)
                 ">"
                 (number->string r)
                 (compile (cons 'begin body) (cons (list var 'reg r) envt)))))
        ((set!)
         (let ((l (assq (cadr e) envt))
               (rhs (compile (caddr e) envt)))
           (case (cadr l)
             ((reg) (list rhs ">" (number->string (caddr l))))
             (else (error "arguments are immutable: ~s" (cadr e))))))
        ((and or)
         (let ((op (if (eq? (car e) 'and) "&" "|")))
           (let loop ((subs (cdr e))
                      (r '())
                      (n 0))
             (if (null? subs)
                 (reverse r)
                 (loop (cdr subs) 
                       (if (> n 0)
                           (cons* op (compile (car subs) envt) r)
                           (cons (compile (car subs) envt) r))
                       (+ n 1))))))
        ((n s e w ne nw se sw)
         (list (compile (cadr e) envt) (symbol->string (car e))))
        ((not)
         (list (compile (cadr e) envt) "~"))
        ((repeat)
         (if (eq? (cadr e) 8)
             (list "{" (compile (caddr e) envt) "}")
             (error "can only repeat 8 times")))
        (else
         (error "unknown operator ~s" (car e)))))
     (else
      (error "unknown form ~s" e))))
  ;
  (define (flatten l)
    (if (pair? l)
        (apply append (map flatten l))
        (list l)))
  ;
  (let ((str (apply string-append
                    (flatten (compile expr (map (lambda (i v)
                                                  (list v 'arg i))
                                                (range (length args))
                                                args))))))
    `(lambda ,args
       (bexec (new-bit-board) ,str ,@args))))
