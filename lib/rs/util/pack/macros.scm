
(define-macro (pack-string . desc)
  (define (every-other lst)
    (if (null? lst)
	'()
	(cons (car lst) (if (null? (cdr lst))
			    '()
			    (every-other (cddr lst))))))
  (let* ((kwds (every-other desc))
	 (vals (every-other (cdr desc)))
	 (pl (make-packing-list kwds)))
    (set-structure-type! pl <string>)
    (set-instance-size! pl (+ (instance-size pl) 1))
    `(pack-using ',pl (vector ,@vals))))

(define-macro (pack . desc)
  ;;
  (define (every-other lst)
    (if (null? lst)
	'()
	(cons (car lst) (if (null? (cdr lst))
			    '()
			    (every-other (cddr lst))))))
  ;;
  (define (crack-at-kwd k lst)
    (let loop ((l lst)
               (r '()))
      (if (or (null? l)
              (eq? (car l) k))
          (values (reverse! r)
                  (cadr l)
                  (cddr l))
          (loop (cddr l)
                (cons* (cadr l) (car l) r)))))
  ;;
  (let ((kwds (every-other desc))
	(vals (every-other (cdr desc))))
    (if (memq 'bvec: kwds)
        (bind ((pre at post (crack-at-kwd 'bvec: desc)))
          (if (and (null? pre)
                   (null? post))
              at
              `(bvec-append ,@(if (pair? pre)
                                  `((pack ,@pre))
                                  '())
                            ,at
                            ,@(if (pair? post)
                                  `((pack ,@post))
                                  '()))))
        `(pack-using ',(make-packing-list kwds)
                     (vector ,@vals)))))

(define-macro (with-unpack expr desc . body)
  (define (every-other lst)
    (if (null? lst)
	'()
	(cons (car lst) (if (null? (cdr lst))
			    '()
			    (every-other (cddr lst))))))
  (bind ((skip desc (if (eq? (car desc) 'skip:)
                        (values (cadr desc) (cddr desc))
                        (values #f desc))))
    (let ((kwds (every-other desc))
          (vals (every-other (cdr desc))))
      `(bind ((,@vals (unpack-using ',(make-packing-list kwds) 
                                    ,expr 
                                    ,@(if skip (list skip) '()))))
         ,@body))))

